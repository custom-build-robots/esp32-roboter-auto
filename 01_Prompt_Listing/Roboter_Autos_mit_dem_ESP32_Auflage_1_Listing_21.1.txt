Du bist ein spezialisierter KI-Programmierassistent mit umfassender Erfahrung in der Entwicklung von Embedded Systems für den ESP32-Mikrocontroller unter Verwendung der Arduino IDE und der Programmiersprache C++. Deine Expertise umfasst die Anbindung von seriellen Peripheriegeräten und I2C-Displays.
Deine Aufgabe ist es, ein eigenständiges C++-Programm für einen ESP32-Mikrocontroller zu erstellen, das Daten von einem GPS-Modul des Typs GY-NEO6MV2 empfängt, verarbeitet und auf einem SSD1306-OLED-Display darstellt.
Für die Anbindung des GPS-Moduls soll die zweite serielle Schnittstelle des ESP32 (HardwareSerial(2)) mit einer Baudrate von 9600 genutzt werden. Verwende hierfür GPIO 16 als RX-Pin und GPIO 17 als TX-Pin. Die Verarbeitung der ankommenden NMEA-Datensätze vom GPS-Modul muss über die Bibliothek "TinyGPSPlus" von Mikal Hart erfolgen. Für die Anzeige wird ein 128×64 Pixel großes SSD1306-OLED-Display verwendet, das über den I2C-Bus an den Standard-Pins GPIO 21 (SDA) und GPIO 22 (SCL) angeschlossen ist. Die Ansteuerung des Displays soll mithilfe der Bibliotheken "Adafruit_SSD1306" und "Adafruit_GFX" realisiert werden.
Das Programm soll kontinuierlich die GPS-Daten auslesen und das Display aktualisieren. Wenn keine gültigen GPS-Daten verfügbar sind, also kein "GPS-Fix" besteht, soll auf dem Display der Text "Suche GPS Signal..." angezeigt werden. Sobald gültige Daten empfangen werden, müssen folgende Informationen klar strukturiert dargestellt werden: der Breitengrad (Latitude) und der Längengrad (Longitude) mit jeweils sechs Nachkommastellen, die aktuelle UTC-Zeit im Format HH:MM:SS sowie die Anzahl der sichtbaren Satelliten. Um die angezeigte UTC-Zeit einfach in eine lokale Zeitzone umrechnen zu können, implementiere bitte eine globale Konstante, beispielsweise const int TIME_ZONE_OFFSET = 2;, und berücksichtige diesen Versatz bei der Anzeige der Zeit auf dem Display.
Bezüglich der Programmstruktur soll der Code übersichtlich mit Kommentaren versehen sein. Alle Initialisierungen für den seriellen Monitor, die serielle GPS-Verbindung, den I2C-Bus und das Display sollen in der setup()-Funktion erfolgen. Die Hauptlogik zum Auslesen, Verarbeiten und Anzeigen der Daten gehört in die loop()-Funktion. Um die Fehlersuche zu erleichtern, soll das Programm Statusmeldungen auf dem seriellen Monitor ausgeben, beispielsweise nach erfolgreicher Initialisierung oder falls nach fünf Sekunden immer noch keine GPS-Daten empfangen wurden.
Das zusammenfassende Ziel ist also, den vollständigen C++-Code für den ESP32 zu liefern, der die GPS-Daten (Position, Zeit, Satellitenanzahl) mithilfe der Bibliothek TinyGPSPlus ausliest und übersichtlich auf einem SSD1306-OLED-Display darstellt, inklusive einer einfachen Zeitzonenanpassung und nützlicher Statusmeldungen für den Benutzer. 
